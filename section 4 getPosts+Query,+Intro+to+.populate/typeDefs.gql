# typedefs tell graphql the shape of our data
# we will pass typedefs in server
type User {
  _id: ID
  # !required
  #@unique unique
  username: String! @unique
  email: String!
  password: String!
  avatar: String
  joinDate: String
  favorites: [Post]
}

type Post {
  title: String!
  imageUrl: String!
  categories: [String]!
  description: String!
  createdDate: String
  likes: Int
  # User cause we have the ref in mongo
  createdBy: User!
  messages: [Message]
}

type Message {
  _id: ID
  messageBody: String!
  messageDate: String
  messageUser: User!
}

type Query {
  getPosts: [Post]
}
# Mutation to add data 
type Mutation {
  addPost(
    title: String!
    imageUrl: String!
    categories: [String]!
    description: String!
    creatorId: ID!
  ): Post!
  # ** need to add resolver
  # pass arguments with types 
  # :User! apecifies what we want to return
  signupUser(username: String!, email: String!, password: String!): User!
}
